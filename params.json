{
  "name": "Sunflower-timelapse",
  "tagline": "Use a Raspberry Pi and Camera Module to create a timelapse of a sunflower growing",
  "body": "# sunflower-timelapse\r\n![heading](https://tamboekie.github.io/sunflower-timelapse/images/head.jpg)\r\n\r\n## Background ##\r\nMy son planted a sunflower seed at school and had to bring it home to look after it and watch it grow. I thought it would be good to use time-lapse photography as a way to capture the slow progress and play it back later. Below, I tried to document the various commands I used to make this happen. I will admit that none of this is perfect, but it is offered in the hope that someone may benefit from it. The assumption is that you have a basic understanding of the Linux terminal, but you may have not played with time-lapse photography before.\r\n\r\n## Hardware ##\r\nI used a Raspberry Pi, a Camera Module and other miscellaneous bits to build the photography rig. The sunflower was placed in the conservatory, as it offered good light. I did not want to try do this outdoors since that would involve weather-proofing the Pi and camera. Here's a short list of items I used:\r\n* [Raspberry Pi 3](https://www.raspberrypi.org/learning/hardware-guide/components/raspberry-pi/) with a small heat sink. Any model B Raspbery Pi will work for this project.\r\n* Raspberry Pi [Camera Module V1](https://www.raspberrypi.org/products/camera-module/).\r\n* An official [2.5A power supply](http://cpc.farnell.com/stontronics/t5875dv/psu-raspberry-pi-5v-2-5a-multi/dp/SC14025).\r\n* A very rough wooden frame to position the camera where I wanted it.\r\n* A home-made camera mount, angled to point at the sunflower, of course.\r\n\r\nThe actual build of the frame and camera mount is not that important - I did the minimum to make sure it was fixed properly. I will add that a sturdy camera mount is very important. The camera module is nearly impossible to position without a mount - don't use a hot glue gun or Blu-Tack. I made my mount from a small, square plastic bottle, cut down to the right size and then screwed into the wooden frame I made.\r\n![camera mount complete](https://tamboekie.github.io/sunflower-timelapse/images/P1140737_crop.JPG)\r\n\r\n## Software setup ##\r\n\r\n### Raspberry Pi installation ###\r\nYou will need to do some basic setup on the Raspberry Pi. It may be possible to do everything on the Pi, but I choose to most of the post-processing on my desktop machine\r\n* [Raspbian](https://www.raspberrypi.org/downloads/raspbian/) Jesse - this is the recommended OS so you probably have this already. Both the Lite and the Desktop variants will work fine.\r\n* You will need to enable the Camera Module using ```raspi-config``` - read more [here](https://www.raspberrypi.org/documentation/configuration/camera.md)\r\n\r\n### Client (desktop) installation ###\r\nI use Ubuntu Linux as my desktop OS. I needed the following packages\r\n* ffmpeg\r\n* imagemagick (convert command)\r\n* ```timelapse-deflicker``` - follow instrcutions from [cyberang3l's github](https://github.com/cyberang3l/timelapse-deflicker).\r\n\r\nRun the commands below to install the dependencies:\r\n```bash\r\nsudo apt-get update\r\nsudo apt-get install ffmpeg imagemagick\r\n```\r\n\r\n\r\n## Capture the photos ##\r\nThe command-line utlity to capture still images with the Raspberry Pi is called [raspistill](https://www.raspberrypi.org/documentation/raspbian/applications/camera.md). It can be used to grab images from the camera module and allows a full-control of the sensor. While it has a built-in time-lapse mode, I found that this was not very stable over long periods. I used cron to schedule the capture instead.\r\n\r\nA simple script is useful to hold all the settings for ```raspistill```. This is better than adding all the settings directly to your cron job. I left most things at the default:\r\n```bash\r\n#!/bin/bash\r\nDATE=$(date +\"%Y%m%d_%H%M%S\")\r\n\r\nraspistill -q 97 -vf -hf -ex night -a 12 -o sun$DATE.jpg -v\r\n```\r\n* The script will create pictures with the date and time added to the filename. This makes it easy to work with the files if you are looking for an image taken at any one moment. However, to create a video the files will need to be renamed later.\r\n* ```-q 97```: JPEG quality is 97.\r\n* ```-vf -hf```: Flip both the vertical and horizontal axis. Depends on how you mount your sensor.\r\n* ```-ex night```: Use night exposure. This seems to work well for daylight too, but allows the camera to choose longer exposures when the light is low.\r\n* ```-a 12```: This adds the date and time directly to the picture. Remove if not needed.\r\n* ```-v```: Turn on verbose output. You can choose to omit this if not needed.\r\n\r\nYou can add a cron job like this:\r\n```bash\r\ncrontab -e\r\n```  \r\nThen, just add this line:\r\n```cron\r\n*/2    5-20     *       *       *       $HOME/sunflowercam.sh\r\n```  \r\n* ```*/2```: Will take an image every **2** minutes. The fastest you can do this is 1 minute\r\n* ```5-20```: Images will be taken from 5am to just before 9pm - in the South-East of England, usually light during this range in the summer months. Experiment with what is right for you.\r\n* ```* * *```: The images are captured every single day without exception. Rememnber to remove the cron job at the end of the project!\r\n* Also remember that each image takes up to 3Mb of disk space - make sure you have enough space\r\n\r\n\r\n### Copy the images to NAS ###\r\nAs I choose to process the images on my desktop, I needed an easy way to copy images across from the Pi. I initially used sftp, but eventually found rsync faster:\r\n```bash\r\nrsync -vvz -t -e ssh /home/pi/*.jpg user@hostname.local:/media/data/sunflower/\r\n```\r\n* Substitute your own ```user``` and ```hostname``` in the above command.\r\n* Will use SSH and will prompt for password.\r\n* Add ```-n``` to do a dry-run and test the command without doing any copying.  \r\n\r\n**Note**: As I said above, make sure you have enough space and regularly remove old images from the Pi once you have them copied to a safe place.\r\n\r\n### Cropping ###\r\nThe camera module has a fixed focus and without a lens it needs to be more than 1 meter away from the subject. I placed my camera as close as practical and then captured the images at full resolution with the intention to crop/resize later. Some experimentation is needed here to ensure good focus. The final aim is to make a video of all the images and I wanted to work at full HD, or 1920x1080.\r\n\r\nInput images are 2592x1944 on the v1 camera module, but my target frame size is 1920x1080, and no I found that no resizing was needed. Only cropping.\r\n* Calculate X offset\r\n\t* Image width = 2592\r\n\t* Target width = 1920\r\n\t* X-offset = (2592 - 1920) / 2 = 336\r\n* Calculate Y offset\r\n  * Image height = 1944\r\n  * Target width = 1080\r\n  * Y offset = (1944 - 1080) / 2 = 432\r\n\r\nNow use ```convert``` [Imagemagick](http://www.imagemagick.org/script/convert.php) to crop the images\r\n```bash\r\nconvert input.jpg -crop 1920x1080+336+432 output.png\r\n```\r\n* I convert the JPEG input image to a PNG to avoid the loss of quality\r\n\r\n### White balance ###\r\nThere is a really useful script written by [Fred Weinhaus](http://www.fmwconcepts.com/imagemagick/autowhite/index.php) called ```autowhite```. It managed to balance all images to an acceptable level without any further processing needed.\r\n```bash\r\nautowhite input.jpg output.png\r\n```\r\nI choose to output in PNG format to avoid further image qaulity loss.\r\n\r\n### Deflicker ###\r\nImages may have different exposures, so you will need to 'deflicker' them, or adjust exposure and possibly white balance.\r\nTry this:\r\n* Original script: https://ubuntuforums.org/showthread.php?t=2022316\r\n* Another source for above https://github.com/rambo/timelapse/blob/master/timelapse-deflicker.pl\r\n* Different approach: http://im.snibgo.com/gainbias.htm\r\n\r\n\r\n```bash\r\nsudo apt-get install libfile-type-perl libterm-progressbar-perl\r\ngit clone https://github.com/cyberang3l/timelapse-deflicker/blob/master/timelapse-deflicker.pl\r\ncd timelapse-deflicker\r\n./timelapse-deflicker -h\r\n```\r\n\r\n\r\n### Rename Images ###\r\nRename a folder full of images (in this case they are named according to date and time) to a numbered list:\r\n```bash\r\nls sun20160808*.jpg| awk 'BEGIN{ a=0 }{ printf \"mv %s img%06d.JPG\\n\", $0, a++ }' | bash\r\n```\r\n\r\nOr, you could just symlink them:\r\n\r\n```bash\r\nls ~/matrix_drc/sun20160810*.jpg| awk 'BEGIN{ a=0 }{ printf \"ln -s %s img%06d.JPG\\n\", $0, a++ }' | bash\r\n```\r\n\r\nIf you wish to return to the original naming convention, these commands may help:\r\n\r\n```bash\r\nexiv2 rename -vtF -r \"sun%Y%m%d_%H%M%S\" *.JPG\r\nfind . -name '*.JPG' -exec rename 's/\\.JPG/\\.jpg/' '{}' \\;\r\n```\r\n\r\n\r\n---\r\n\r\n### Video ###\r\nEncode the numbered images to an MP4, 15fps, Q=22\r\n```bash\r\navconv -y -r 15 -i img%06d.JPG -r 15 -vcodec libx264 -crf 22.0 -vf crop=1920:1080,scale=iw:ih,unsharp,hqdn3d fullhd_unsharp2.mp4\u0001\r\n```\r\n* Will crop the input images to 1080p. Not sure what will happen if inout is smaller.\r\n* I find the unsharp filter helps with the soft images out of the RPi camera v1\r\n* The hqdn3 filter reduces some noise, which in turn reduces file size,  but still preserves edges.\r\n\r\n\r\n---\r\n### References ###\r\nClick [here](http://techedemic.com/2014/09/18/creating-a-timelapse-clip-with-avconv/) for the orignal post.\r\nGeneral timelapse info at [www.learntimelapse.com](http://www.learntimelapse.com/time-lapse-exposure-avoiding-flicker-and-dragging-shutter/)\r\n\r\n## Final thoughts ##\r\n* If you have a choice, get the [V2 camera module](https://www.raspberrypi.org/products/camera-module-v2/). It uses a much better (Sony) image sensor, which should result in a higher quality photos.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}